// Mocks generated by Mockito 5.0.16 from annotations
// in meta_wallet/test/trace_fetch_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:meta_wallet/level_1_core/network/http_request.dart' as _i2;
import 'package:meta_wallet/level_1_core/storage/file_storage.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [HttpRequest].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpRequest<T> extends _i1.Mock implements _i2.HttpRequest<T> {
  MockHttpRequest() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<T?> jsonRequest(String? urlString) =>
      (super.noSuchMethod(Invocation.method(#jsonRequest, [urlString]),
          returnValue: Future<T?>.value()) as _i3.Future<T?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [FileStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileStorage extends _i1.Mock implements _i4.FileStorage {
  MockFileStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> writeJson(Object? jsonData, String? fileName,
          {String? folderType = r'doc'}) =>
      (super.noSuchMethod(
          Invocation.method(
              #writeJson, [jsonData, fileName], {#folderType: folderType}),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<Object?> readJson(String? fileName,
          {String? folderType = r'doc'}) =>
      (super.noSuchMethod(
          Invocation.method(#readJson, [fileName], {#folderType: folderType}),
          returnValue: Future<Object?>.value()) as _i3.Future<Object?>);
  @override
  _i3.Future<bool> exists(String? fileName, {String? folderType = r'doc'}) =>
      (super.noSuchMethod(
          Invocation.method(#exists, [fileName], {#folderType: folderType}),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  String toString() => super.toString();
}
